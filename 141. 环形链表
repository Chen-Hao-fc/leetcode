# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None
# 快慢指针
class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        """
        if not head:
            return False
        fast = head.next
        low = head
        while low and fast:
            if low == fast:
                return True
            low = low.next
            if fast.next:
                fast = fast.next.next
            else:
                return False
        return False
